
# This configuration is for OpenEBS Installation, ControlPlaneUpgrade
# and unInstallation.
apiVersion: dao.mayadata.io/v1alpha1
kind: OpenEBS
metadata:
  name: install-openebs-1.5
  # Namespace i.e. the namespace where the openebs-upgrade operator and the
  # other openebs components will be installed/needs-to-be-installed.
  namespace: openebs
  labels:
    name: openebs-upgrade
spec:
  # OpenEBS Version to be installed.
  version: "1.5"

  # defaultStoragePath is the directory which will be used by
  # default for various OpenEBS operations i.e.,it can be used to
  # specify the hostpath to be used for default Jiva StoragePool
  # loaded by OpenEBS.
  #
  # Defaults to /var/openebs
  defaultStoragePath: "/var/openebs"

  # If createDefaultStorageConfig is false then OpenEBS default
  # storage class and storage pool will not be created.
  #
  # Defaults to true
  createDefaultStorageConfig: true

  # A custom registry could be specified for pulling the container
  # images.
  # Note: This field should be used when user has pulled and pushed
  # the images to a custom registry.
  imagePrefix: "quay.io/openebs/"

  # Defaults to IfNotPresent
  # Note: This policy will be applicable to all the images being used
  # for OpenEBS components.
  imagePullPolicy: "IfNotPresent"

  # resources can be used to specify the resource requests of the containers
  # of the OpenEBS components in terms of CPU and Memory
  #
  # resources provided at this level i.e., .spec.resources will be applicable
  # to all the containers of all the components.
  #
  # This can be overrided by providing it for a particular component in the
  # component's specified section, for example, inside apiServer.
  resources:
    requests:
      memory: "64Mi"
      cpu: "250m"
    limits:
      memory: "128Mi"
      cpu: "500m"

  # apiServer store the configuration for maya-apiserver
  #
  # maya-apiserver helps with the creation of CAS Volumes and provides
  # API endpoints to manage those volumes. It can also be considered as
  # a template engine that can be easily extended to support any kind of
  # CAS storage solutions.
  #
  # It is deployed as a deployment in the k8s cluster.
  apiServer:

    # This field decides whether this component should be installed
    # or not, if set to false, this component will not be installed.
    #
    # Defaults to true.
    enabled: true

    # imageTag is the tag for the container image which will be used
    # by this component.
    #
    # If not set, it will be the spec.version of the OpenEBS set
    # above.
    imageTag:

    # replicas specifies the number of replicas to be deployed.
    #
    # Defaults to 1.
    replicas: 1

    # resources can be used to specify the resource requests of the containers
    # of the OpenEBS components in terms of CPU and Memory
    #
    # resources provided at this level i.e., .spec.apiServer.resources will
    # override the resource requests if provided at the .spec.resources level
    # for this component.
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"


    # cstorSparsePool specifies the config for cstor sparse pools i.e., whether it
    # should be created by default or not when OpenEBS gets
    # installed.
    cstorSparsePool:

      # enabled decides whether default cstor
      # sparse pool should be configured as a part of openebs
      # installation.
      #
      # If "true" a default cstor sparse pool will be configured, if
      # "false" it will not be configured.
      # This value takes effect only if createDefaultStorageConfig is
      # set to true.
      #
      # Defaults to false
      enabled: false

    # nodeSelector specifies on which nodes the pods of this
    # component can be scheduled.
    #
    # If not provided, pods of the component can be scheduled on all
    # the available nodes.
    nodeSelector:

    # tolerations can be used if we want the pods of this component
    # to tolerate some or all of the taints of nodes.
    #
    # If not provided, it will not tolerate any of the taints on the node.
    tolerations:

    # affinity should be provided in the same way we provide affinity for a
    # deployment/daemonset. It can also be used for scheduling nodes on a
    # particular set of nodes or even for not scheduling nodes on a particular
    # set of nodes.
    affinity:

  # provisioner stores the configuration for OpenEBS provisioner
  #
  # provisioner is an implementation of Kubernetes Dynamic Provisioner
  # that processes the PVC requests by interacting with maya-apiserver.
  #
  # It is deployed as a deployment in the k8s cluster.
  provisioner:
    enabled: true
    imageTag:
    replicas: 1
    resources:
    nodeSelector:
    tolerations:
    affinity:

  # localProvisioner stores the configuration for OpenEBS local
  # provisioner
  #
  # localProvisioner is responsible for processing the PVC requests
  # for provisioning local persistent volumes
  #
  # It is deployed as a deployment in the k8s cluster.
  localProvisioner:
    enabled: true
    imageTag:
    replicas: 1
    resources:
    nodeSelector:
    tolerations:
    affinity:

  # snapshotOperator stores the configuration for snapshot operator
  #
  # Operator for the snapshot controller and provisioner.
  # It consists of the snapshot controller and provisioner containers.
  #
  # It is deployed as a deployment in the k8s cluster.
  snapshotOperator:
    enabled: true
    controller:
      imageTag:
    provisioner:
      imageTag:
    replicas: 1
    resources:
    nodeSelector:
    tolerations:
    affinity:

  # ndmDaemon stores the configuration for node-disk-manager daemonset
  #
  # ndmDaemon is a daemonset that helps to manage the disks attached to
  # the Kubernetes Nodes.
  # It can be used to extend the capabilities of Kubernetes to provide
  # access to disk inventory across cluster.
  #
  # It is deployed as a daemonset in the k8s cluster.
  ndmDaemon:
    enabled: true
    imageTag:
    replicas: 1
    resources:

    # sparse stores the configuration for sparse files.
    #
    # Sparse File help simulate disk objects that can be used for testing and
    # proto typing solutions built using node-disk-manager(NDM).Sparse files
    # will be created if NDM is provided with the location where sparse files
    # should be located.
    sparse:
      # path defines a sparse directory for creating a sparse file
      # at the specified directory and an associated BlockDevice CR
      # gets added to Kubernetes.
      path:
      # size define the size of created sparse file
      size:
      # count defines the number of sparse files to be created
      count:

    # filters contain the config for excluding or including vendors,
    # paths, etc.
    #
    # Defaults for excluding vendors will be CLOUDBYT,OpenEBS, paths
    # will be loop,fd0,sr0,/dev/ram,/dev/dm-,/dev/md
    filters:
      osDisk:
        enabled:
        exclude: "/,/etc/hosts,/boot"
      vendor:
        enabled:
        exclude: "CLOUDBYT,OpenEBS"
      path:
        enabled:
        exclude: "loop,fd0,sr0,/dev/ram,/dev/dm-,/dev/md"
        include: ""

    # probes can be used to configure ndm probes such as Seachest,
    # smart, capacity, etc.
    probes:
      udev:
        enabled: true
      smart:
        enabled: true
      seachest:
        enabled: false
    nodeSelector:
    tolerations:
    affinity:

  # ndmOperator stores the configuration for ndm operator
  #
  # ndmOperator is responsible for installation, upgrade and
  # lifecycle-management of node-disk-manager.
  #
  # It is deployed as a deployment in the k8s cluster.
  ndmOperator:
    enabled: true
    imageTag:
    replicas: 1
    resources:
    nodeSelector:
    tolerations:
    affinity:

  # jivaConfig stores the configuration for Jiva: CAS Data Engine
  #
  # Jiva provides highly available iSCSI block storage Persistent
  # Volumes for Kubernetes Stateful Applications, by making use of the host filesystem.
  #
  # It consists of a target (or a Storage Controller) that exposes iSCSI,
  # while synchronously replicating the data to one or more Replicas and a set of
  # replicas that a Target uses to read/write data.
  jivaConfig:
    imageTag:
    replicas: 1

  # cstorConfig stores the configuration for Cstor: CAS Data Engine
  #
  # The primary function of cStor is to serve the iSCSI block storage using
  # the underlying disks in a cloud native way.cStor is a very light weight
  # and feature rich storage engine. It provides enterprise grade features
  # such as synchronous data replication, snapshots, clones, thin provisioning
  # of data, high resiliency of data, etc.
  #
  # It has two main components: cStor pool pods and cStor target pods.
  #
  # pool, poolMgmt, target and volumeMgmt are the containers which are deployed
  # in the k8s cluster.
  cstorConfig:
    pool:
      imageTag:
    poolMgmt:
      imageTag:
    target:
      imageTag:
    volumeMgmt:
      imageTag:
    # cStorCSI stores the configuration for CSIDriver installation for cStor.
    cStorCSI:
      # cStorCSIController is the statefulset that runs on kube-system namespace with one of the container of openebs
      # i.e openebs-csi-plugin.
      # enabled field can be used to enable/disable this specific component.
      cStorCSIController:
        enabled:
        imageTag:
      # cStorCSINode is the daemonset that runs on kube-system namespace with one of the container of openebs
      # i.e openebs-csi-plugin.
      # enabled field can be used to enable/disable this specific component.
      # iscsiPath field is used to define the path of the iscsiadm binary where it is installed.
      # Default is /sbin/iscsiadm
      cStorCSINode:
        enabled:
        imageTag:
        iscsiPath:

  # admissionServer is an implementation of kubernetes validation admission webhook.
  #
  # It is used for validating various operations before proceeding with them like
  # PVC delete operation, etc.
  #
  # It is deployed as a deployment in k8s cluster.
  admissionServer:
    enabled:
    imageTag:
    failurePolicy:
    replicas:
    resources:
    nodeSelector:
    tolerations:
    affinity:

  # helper consists of alpine based linux utils docker image used for
  # launching helper jobs.
  helper:
    imageTag:

  # policies consists of the various policies supported by OpenEBS such as
  # monitoring.
  #
  # It stores the config such as which all policies are enabled and what are the
  # image tags that should be used for deploying the containers in the k8s cluster.
  #
  # Currently, only monitoring policy is supported which is deployed as m-exporter
  # container.
  policies:
    monitoring:
      enabled:
      imageTag:

  # analytics is used for enabling/disabling google analytics. If set to true, it
  # sends anonymous usage events to Google Analytics
  #
  # It is set to true by default.
  analytics:
    enabled:

    # Specify in hours the duration after which a ping event needs to be sent.
    pingInterval: "24h"

  # Options contains the optional flags that can be passed during
  # installation/upgrade/uninstallation i.e.Timeout can be one of the
  # optional flags where timeout could be the maximum seconds to wait
  # at any given step.
  options:

status:
    # Online and Error could be some of the phases
    phase:
    reason:
